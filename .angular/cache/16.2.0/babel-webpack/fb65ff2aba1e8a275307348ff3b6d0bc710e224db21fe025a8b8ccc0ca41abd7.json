{"ast":null,"code":"import { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Movie } from \"../models/movie\";\nimport { environment as ENV } from \"../../environments/environment\";\nimport { Subject, BehaviorSubject } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MoviesService = /*#__PURE__*/(() => {\n  var _class;\n  class MoviesService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.movies = new BehaviorSubject(Array());\n      this.wsUrl = ENV.apiUrl + \"/movies\";\n      this.search = new Subject();\n      this.genreSelectedS = new BehaviorSubject(Array());\n      this.genreSelectedA = new BehaviorSubject(Array());\n      this.realsSelected = new BehaviorSubject(Array());\n      this.actorsSelected = new BehaviorSubject(Array());\n    }\n    addGenreSelectedS(genre) {\n      let arrayGenresS = this.genreSelectedS.value;\n      arrayGenresS.push(genre);\n      this.genreSelectedS.next(arrayGenresS);\n    }\n    removeGenreSelectedS(genre) {\n      this.genreSelectedS.next(this.genreSelectedS.value.filter(g => g !== genre));\n    }\n    get getFinalPage() {\n      return this._finalPage;\n    }\n    getMoviesPage(page) {\n      return this.httpClient.get(`${this.wsUrl}/${page}`).pipe(tap(page => {\n        this.movies.next(page.content);\n        this._finalPage = page.totalPages - 1;\n      })).toPromise();\n    }\n    getIndexMovie(id) {\n      return this.movies.value.findIndex(movie => movie.id === id);\n    }\n    getBesttAlloMovie() {\n      return this.httpClient.get(`${this.wsUrl}/bestAlloMovie`).toPromise();\n    }\n    getMovieForCaroussel(titre, page, size) {\n      let params = new HttpParams().set(\"page\", (page - 1).toString()).set(\"size\", size.toString());\n      return this.httpClient.get(`${this.wsUrl}/caroussel/${titre}`, {\n        params: params\n      });\n    }\n    createMovie(movie) {\n      let movies = this.movies.value;\n      this.httpClient.post(this.wsUrl, movie).subscribe(movieFromJee => {\n        movies.push(new Movie(movieFromJee.titre, movieFromJee.synopsis, movieFromJee.genres, movieFromJee.casting, movieFromJee.realisateur, movieFromJee.covPortrait, movieFromJee.covPaysage, movie.time, movieFromJee.year, movieFromJee.pegi, movieFromJee.avertissement, movieFromJee.id));\n        this.movies.next(movies);\n      });\n    }\n    updateMovie(movie) {\n      let movies = this.movies.value;\n      this.httpClient.put(this.wsUrl + `/${movie.id}`, movie).subscribe(movieFromJee => {\n        const index = this.getIndexMovie(movie.id);\n        if (index >= 0) {\n          movies.splice(index, 1, new Movie(movieFromJee.titre, movieFromJee.synopsis, movieFromJee.genres, movieFromJee.casting, movieFromJee.realisateur, movieFromJee.covPortrait, movieFromJee.covPaysage, movie.time, movieFromJee.year, movieFromJee.pegi, movieFromJee.avertissement, movieFromJee.id, movieFromJee.grade, movieFromJee.alloGrade, movieFromJee.imdbGrade));\n          this.movies.next(movies);\n        }\n      });\n    }\n    getGenreSelectedS() {\n      return this.genreSelectedS;\n    }\n    getGenreSelectedA() {\n      return this.genreSelectedA;\n    }\n    getRealsSelected() {\n      return this.realsSelected;\n    }\n    getActorsSelected() {\n      return this.actorsSelected;\n    }\n    getRealisateurs() {\n      this.realisateurs = new Array();\n      this.httpClient.get(this.wsUrl + `/realisateurs`).subscribe(list => this.realisateurs.push(...list));\n      return this.realisateurs;\n    }\n    getActors() {\n      this.actors = new Array();\n      this.httpClient.get(this.wsUrl + `/acteurs`).subscribe(list => this.actors.push(...list));\n      return this.actors;\n    }\n    // public getMoviesByGenre(genre: string): Observable<Array<Movie>> {\n    //   return this.httpClient.get<Array<Movie>>(this.wsUrl + `/byGenre/${genre}`);\n    // }\n    getMoviesAlreadyExcluded(oldMovies, movies) {\n      let moviesExcluded = new Array();\n      for (let movie of oldMovies) {\n        if (movies.indexOf(movie) === -1) {\n          moviesExcluded.push(movie);\n        }\n      }\n      return moviesExcluded;\n    }\n    eraseOldSelected(oldMovies, movies, moviesByExclusion, genres, realisateurs, acteurs) {\n      for (let movie of this.getMoviesAlreadyExcluded(oldMovies, movies)) {\n        if (moviesByExclusion.indexOf(movie) !== -1) {\n          for (let genre of genres) {\n            if (movie.genreindexOf(genre) !== -1) {\n              moviesByExclusion.splice(moviesByExclusion.indexOf(movie), 1);\n            }\n          }\n          for (let real of realisateurs) {\n            if (movie.realisateur.toLowerCase().indexOf(real.toLowerCase()) !== -1) {\n              moviesByExclusion.splice(moviesByExclusion.indexOf(movie), 1);\n            }\n          }\n          for (let act of acteurs) {\n            if (movie.casting.toLowerCase().indexOf(act.toLowerCase()) !== -1) {\n              moviesByExclusion.splice(moviesByExclusion.indexOf(movie), 1);\n            }\n          }\n        }\n      }\n      return moviesByExclusion;\n    }\n    getMovieByExclusionGenres(oldMovies, movies, genresS, genresA, realisateurs, acteurs) {\n      let genres = new Array();\n      genresS.forEach(g => genres.push(g));\n      genresA.forEach(g => genres.push(g));\n      let moviesByExclusionGenres = new Array();\n      for (let movie of oldMovies) {\n        let present = false;\n        for (let genre of genres) {\n          if (movie.genre.length > 0) {\n            let index = movie.genre.indexOf(genre);\n            if (index != -1) {\n              present = true;\n            }\n          }\n        }\n        if (!present) {\n          moviesByExclusionGenres.push(movie);\n        }\n      }\n      moviesByExclusionGenres = this.eraseOldSelected(oldMovies, movies, moviesByExclusionGenres, genres, realisateurs, acteurs);\n      return moviesByExclusionGenres;\n    }\n    getMovieByInclusionGenres(movies, genres) {\n      let moviesByInclusionGenres = new Array();\n      for (let movie of movies) {\n        for (let genre of genres) {\n          if (JSON.stringify(movie.genres) != \"\") {\n            let index = movie.genres.toLowerCase().indexOf(genre.toLowerCase());\n            if (index != -1) {\n              moviesByInclusionGenres.push(movie);\n            }\n          }\n        }\n      }\n      if (genres.length >= 1) {\n        return moviesByInclusionGenres;\n      } else {\n        return this.movies.value;\n      }\n    }\n    getMovieByExclusionReals(oldMovies, movies, genresS, genresA, realisateurs, acteurs) {\n      let genres = new Array();\n      genresS.forEach(g => genres.push(g));\n      genresA.forEach(g => genres.push(g));\n      let moviesByExclusionReals = new Array();\n      for (let movie of oldMovies) {\n        let present = false;\n        for (let real of realisateurs) {\n          if (JSON.stringify(movie.realisateur) != \"\") {\n            let index = movie.realisateur.toLowerCase().indexOf(real.toLowerCase());\n            if (index != -1) {\n              present = true;\n            }\n          }\n        }\n        if (!present) {\n          moviesByExclusionReals.push(movie);\n        }\n      }\n      moviesByExclusionReals = this.eraseOldSelected(oldMovies, movies, moviesByExclusionReals, genres, realisateurs, acteurs);\n      return moviesByExclusionReals;\n    }\n    getMovieByInclusionReals(movies, reals) {\n      let moviesByInclusionReals = new Array();\n      for (let movie of movies) {\n        for (let real of reals) {\n          if (JSON.stringify(movie.realisateur) != \"\") {\n            let index = movie.realisateur.toLowerCase().indexOf(real.toLowerCase());\n            if (index != -1) {\n              moviesByInclusionReals.push(movie);\n            }\n          }\n        }\n      }\n      if (reals.length >= 1) {\n        return moviesByInclusionReals;\n      } else {\n        return this.movies.value;\n      }\n    }\n    getMovieByInclusionActors(movies, actors) {\n      let moviesByInclusionActors = new Array();\n      for (let movie of movies) {\n        for (let actor of actors) {\n          if (JSON.stringify(movie.casting) != \"\") {\n            let index = movie.casting.toLowerCase().indexOf(actor.toLowerCase());\n            if (index != -1) {\n              moviesByInclusionActors.push(movie);\n            }\n          }\n        }\n      }\n      if (actors.length >= 1) {\n        return moviesByInclusionActors;\n      } else {\n        return this.movies.value;\n      }\n    }\n    getSelectedGenresS() {\n      return this.genreSelectedS.value;\n    }\n    getSelectedGenresA() {\n      return this.genreSelectedA.value;\n    }\n    getSelectedReals() {\n      return this.realsSelected.value;\n    }\n    getSelectedActors() {\n      return this.actorsSelected.value;\n    }\n    setItemsSelected(items, type) {\n      switch (type) {\n        case \"genresS\":\n          this.genreSelectedS.next(items);\n        case \"genresA\":\n          this.genreSelectedA.next(items);\n        case \"reals\":\n          this.realsSelected.next(items);\n        case \"actors\":\n          this.actorsSelected.next(items);\n      }\n    }\n    setSearch(search) {\n      this.search.next(search);\n    }\n    getSearch() {\n      return this.search.asObservable();\n    }\n    getUpperForFirstLetter(type) {\n      return type[0].toUpperCase() + type.substring(1);\n    }\n  }\n  _class = MoviesService;\n  _class.ɵfac = function MoviesService_Factory(t) {\n    return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n  };\n  _class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _class,\n    factory: _class.ɵfac,\n    providedIn: \"root\"\n  });\n  return MoviesService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}